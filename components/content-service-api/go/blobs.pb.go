// Code generated by protoc-gen-go. DO NOT EDIT.
// source: blobs.proto

package api

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BlobRef struct {
	OwnerId              string   `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BlobRef) Reset()         { *m = BlobRef{} }
func (m *BlobRef) String() string { return proto.CompactTextString(m) }
func (*BlobRef) ProtoMessage()    {}
func (*BlobRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{0}
}

func (m *BlobRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BlobRef.Unmarshal(m, b)
}
func (m *BlobRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BlobRef.Marshal(b, m, deterministic)
}
func (m *BlobRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BlobRef.Merge(m, src)
}
func (m *BlobRef) XXX_Size() int {
	return xxx_messageInfo_BlobRef.Size(m)
}
func (m *BlobRef) XXX_DiscardUnknown() {
	xxx_messageInfo_BlobRef.DiscardUnknown(m)
}

var xxx_messageInfo_BlobRef proto.InternalMessageInfo

func (m *BlobRef) GetOwnerId() string {
	if m != nil {
		return m.OwnerId
	}
	return ""
}

func (m *BlobRef) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type UploadUrlRequest struct {
	Ref *BlobRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	// time_to_live is a valid Go duration string that determines an object's
	TimeToLive           string   `protobuf:"bytes,2,opt,name=time_to_live,json=timeToLive,proto3" json:"time_to_live,omitempty"`
	MediaType            string   `protobuf:"bytes,3,opt,name=media_type,json=mediaType,proto3" json:"media_type,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadUrlRequest) Reset()         { *m = UploadUrlRequest{} }
func (m *UploadUrlRequest) String() string { return proto.CompactTextString(m) }
func (*UploadUrlRequest) ProtoMessage()    {}
func (*UploadUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{1}
}

func (m *UploadUrlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadUrlRequest.Unmarshal(m, b)
}
func (m *UploadUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadUrlRequest.Marshal(b, m, deterministic)
}
func (m *UploadUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadUrlRequest.Merge(m, src)
}
func (m *UploadUrlRequest) XXX_Size() int {
	return xxx_messageInfo_UploadUrlRequest.Size(m)
}
func (m *UploadUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UploadUrlRequest proto.InternalMessageInfo

func (m *UploadUrlRequest) GetRef() *BlobRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *UploadUrlRequest) GetTimeToLive() string {
	if m != nil {
		return m.TimeToLive
	}
	return ""
}

func (m *UploadUrlRequest) GetMediaType() string {
	if m != nil {
		return m.MediaType
	}
	return ""
}

type UploadUrlResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	CommitToken          string   `protobuf:"bytes,2,opt,name=commit_token,json=commitToken,proto3" json:"commit_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadUrlResponse) Reset()         { *m = UploadUrlResponse{} }
func (m *UploadUrlResponse) String() string { return proto.CompactTextString(m) }
func (*UploadUrlResponse) ProtoMessage()    {}
func (*UploadUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{2}
}

func (m *UploadUrlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadUrlResponse.Unmarshal(m, b)
}
func (m *UploadUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadUrlResponse.Marshal(b, m, deterministic)
}
func (m *UploadUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadUrlResponse.Merge(m, src)
}
func (m *UploadUrlResponse) XXX_Size() int {
	return xxx_messageInfo_UploadUrlResponse.Size(m)
}
func (m *UploadUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UploadUrlResponse proto.InternalMessageInfo

func (m *UploadUrlResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *UploadUrlResponse) GetCommitToken() string {
	if m != nil {
		return m.CommitToken
	}
	return ""
}

type CommitRequest struct {
	Ref                  *BlobRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	CommitToken          string   `protobuf:"bytes,2,opt,name=commit_token,json=commitToken,proto3" json:"commit_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitRequest) Reset()         { *m = CommitRequest{} }
func (m *CommitRequest) String() string { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()    {}
func (*CommitRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{3}
}

func (m *CommitRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitRequest.Unmarshal(m, b)
}
func (m *CommitRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitRequest.Marshal(b, m, deterministic)
}
func (m *CommitRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitRequest.Merge(m, src)
}
func (m *CommitRequest) XXX_Size() int {
	return xxx_messageInfo_CommitRequest.Size(m)
}
func (m *CommitRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CommitRequest proto.InternalMessageInfo

func (m *CommitRequest) GetRef() *BlobRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

func (m *CommitRequest) GetCommitToken() string {
	if m != nil {
		return m.CommitToken
	}
	return ""
}

type CommitResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CommitResponse) Reset()         { *m = CommitResponse{} }
func (m *CommitResponse) String() string { return proto.CompactTextString(m) }
func (*CommitResponse) ProtoMessage()    {}
func (*CommitResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{4}
}

func (m *CommitResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CommitResponse.Unmarshal(m, b)
}
func (m *CommitResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CommitResponse.Marshal(b, m, deterministic)
}
func (m *CommitResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CommitResponse.Merge(m, src)
}
func (m *CommitResponse) XXX_Size() int {
	return xxx_messageInfo_CommitResponse.Size(m)
}
func (m *CommitResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CommitResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CommitResponse proto.InternalMessageInfo

type DownloadUrlRequest struct {
	Ref                  *BlobRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadUrlRequest) Reset()         { *m = DownloadUrlRequest{} }
func (m *DownloadUrlRequest) String() string { return proto.CompactTextString(m) }
func (*DownloadUrlRequest) ProtoMessage()    {}
func (*DownloadUrlRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{5}
}

func (m *DownloadUrlRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadUrlRequest.Unmarshal(m, b)
}
func (m *DownloadUrlRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadUrlRequest.Marshal(b, m, deterministic)
}
func (m *DownloadUrlRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadUrlRequest.Merge(m, src)
}
func (m *DownloadUrlRequest) XXX_Size() int {
	return xxx_messageInfo_DownloadUrlRequest.Size(m)
}
func (m *DownloadUrlRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadUrlRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadUrlRequest proto.InternalMessageInfo

func (m *DownloadUrlRequest) GetRef() *BlobRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

type DownloadUrlResponse struct {
	Url                  string   `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownloadUrlResponse) Reset()         { *m = DownloadUrlResponse{} }
func (m *DownloadUrlResponse) String() string { return proto.CompactTextString(m) }
func (*DownloadUrlResponse) ProtoMessage()    {}
func (*DownloadUrlResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{6}
}

func (m *DownloadUrlResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownloadUrlResponse.Unmarshal(m, b)
}
func (m *DownloadUrlResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownloadUrlResponse.Marshal(b, m, deterministic)
}
func (m *DownloadUrlResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownloadUrlResponse.Merge(m, src)
}
func (m *DownloadUrlResponse) XXX_Size() int {
	return xxx_messageInfo_DownloadUrlResponse.Size(m)
}
func (m *DownloadUrlResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DownloadUrlResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DownloadUrlResponse proto.InternalMessageInfo

func (m *DownloadUrlResponse) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

type DeleteRequest struct {
	Ref                  *BlobRef `protobuf:"bytes,1,opt,name=ref,proto3" json:"ref,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{7}
}

func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteRequest.Unmarshal(m, b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return xxx_messageInfo_DeleteRequest.Size(m)
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetRef() *BlobRef {
	if m != nil {
		return m.Ref
	}
	return nil
}

type DeleteResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_674b571f3bc1c185, []int{8}
}

func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteResponse.Unmarshal(m, b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return xxx_messageInfo_DeleteResponse.Size(m)
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*BlobRef)(nil), "contentservice.BlobRef")
	proto.RegisterType((*UploadUrlRequest)(nil), "contentservice.UploadUrlRequest")
	proto.RegisterType((*UploadUrlResponse)(nil), "contentservice.UploadUrlResponse")
	proto.RegisterType((*CommitRequest)(nil), "contentservice.CommitRequest")
	proto.RegisterType((*CommitResponse)(nil), "contentservice.CommitResponse")
	proto.RegisterType((*DownloadUrlRequest)(nil), "contentservice.DownloadUrlRequest")
	proto.RegisterType((*DownloadUrlResponse)(nil), "contentservice.DownloadUrlResponse")
	proto.RegisterType((*DeleteRequest)(nil), "contentservice.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "contentservice.DeleteResponse")
}

func init() {
	proto.RegisterFile("blobs.proto", fileDescriptor_674b571f3bc1c185)
}

var fileDescriptor_674b571f3bc1c185 = []byte{
	// 388 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0xcd, 0x8b, 0xda, 0x40,
	0x14, 0xaf, 0x5a, 0xb4, 0xbe, 0xa8, 0xa4, 0xd3, 0x43, 0xad, 0x60, 0xd1, 0xe9, 0xa1, 0xed, 0xc1,
	0x48, 0xed, 0xa5, 0xf4, 0x52, 0xb0, 0x1e, 0x2a, 0xf4, 0x94, 0x55, 0x58, 0x16, 0x96, 0x90, 0x8f,
	0xe7, 0xee, 0xb0, 0x49, 0x5e, 0x36, 0x19, 0x15, 0x2f, 0x7b, 0xdc, 0xbf, 0x7b, 0xc9, 0x24, 0x11,
	0x3f, 0x50, 0x16, 0x6f, 0x6f, 0x7e, 0xf3, 0xfb, 0x78, 0xef, 0x25, 0x03, 0x9a, 0xe3, 0x93, 0x93,
	0x18, 0x51, 0x4c, 0x92, 0x58, 0xcb, 0xa5, 0x50, 0x62, 0x28, 0x13, 0x8c, 0x57, 0xc2, 0x45, 0xfe,
	0x0b, 0x6a, 0x63, 0x9f, 0x1c, 0x13, 0x17, 0xec, 0x13, 0xbc, 0xa3, 0x75, 0x88, 0xb1, 0x25, 0xbc,
	0x76, 0xa9, 0x57, 0xfa, 0x56, 0x37, 0x6b, 0xea, 0x3c, 0xf5, 0x18, 0x83, 0xb7, 0xa1, 0x1d, 0x60,
	0xbb, 0xac, 0x60, 0x55, 0xf3, 0x27, 0xd0, 0xe7, 0x91, 0x4f, 0xb6, 0x37, 0x8f, 0x7d, 0x13, 0x1f,
	0x97, 0x98, 0x48, 0xf6, 0x1d, 0x2a, 0x31, 0x2e, 0x94, 0x5a, 0x1b, 0x7d, 0x34, 0xf6, 0xb3, 0x8c,
	0x3c, 0xc8, 0x4c, 0x39, 0xac, 0x07, 0x0d, 0x29, 0x02, 0xb4, 0x24, 0x59, 0xbe, 0x58, 0x15, 0xd6,
	0x90, 0x62, 0x33, 0xfa, 0x2f, 0x56, 0xc8, 0xba, 0x00, 0x01, 0x7a, 0xc2, 0xb6, 0xe4, 0x26, 0xc2,
	0x76, 0x45, 0xdd, 0xd7, 0x15, 0x32, 0xdb, 0x44, 0xc8, 0xff, 0xc1, 0xfb, 0x9d, 0xfc, 0x24, 0xa2,
	0x30, 0x41, 0xa6, 0x43, 0x65, 0x19, 0xfb, 0x79, 0xfb, 0x69, 0xc9, 0xfa, 0xd0, 0x70, 0x29, 0x08,
	0x84, 0xb4, 0x24, 0x3d, 0x60, 0x98, 0xe7, 0x68, 0x19, 0x36, 0x4b, 0x21, 0x7e, 0x0b, 0xcd, 0xbf,
	0xea, 0x78, 0xc1, 0x18, 0xaf, 0xb0, 0xd7, 0xa1, 0x55, 0xd8, 0x67, 0x5d, 0xf2, 0x3f, 0xc0, 0x26,
	0xb4, 0x0e, 0x2f, 0x5e, 0x1e, 0xff, 0x0a, 0x1f, 0xf6, 0x0c, 0x4e, 0x4d, 0xcf, 0x7f, 0x43, 0x73,
	0x82, 0x3e, 0x4a, 0xbc, 0x20, 0x44, 0x87, 0x56, 0xa1, 0xcd, 0xfc, 0x47, 0xcf, 0x65, 0xd0, 0x52,
	0xca, 0x55, 0x46, 0x67, 0x26, 0xd4, 0xb7, 0x9f, 0x80, 0xf5, 0x0e, 0xcd, 0x0e, 0xff, 0x8e, 0x4e,
	0xff, 0x0c, 0x23, 0xdf, 0xcc, 0x1b, 0x76, 0x0d, 0xda, 0xce, 0x68, 0x8c, 0x1f, 0x6a, 0x8e, 0x17,
	0xd7, 0xf9, 0x72, 0x96, 0xb3, 0x75, 0x9e, 0x42, 0x35, 0x9b, 0x87, 0x75, 0x8f, 0x04, 0xbb, 0x3b,
	0xea, 0x7c, 0x3e, 0x75, 0x5d, 0x58, 0x8d, 0x7f, 0xdc, 0x0c, 0xef, 0x84, 0xbc, 0x5f, 0x3a, 0x86,
	0x4b, 0x41, 0x5a, 0x46, 0xe4, 0x0d, 0x04, 0xe5, 0xd5, 0x30, 0x97, 0x0f, 0x72, 0xfd, 0xd0, 0x8e,
	0x84, 0x53, 0x55, 0xef, 0xef, 0xe7, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x06, 0x5d, 0xde, 0xeb,
	0x8e, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BlobServiceClient is the client API for BlobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BlobServiceClient interface {
	// UploadUrl provides a URL to which clients can upload the content via HTTP
	// PUT. Possible errors:
	// - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
	// - RESOURCE_EXHAUSTED if a user's upload area is exhausted
	UploadUrl(ctx context.Context, in *UploadUrlRequest, opts ...grpc.CallOption) (*UploadUrlResponse, error)
	// DownloadUrl provides a URL from which clients download the content via HTTP.
	// Expect the download to be resumable, i.e. support for the `Range` header.
	// Possible errors:
	// - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
	// - NOT_FOUND if the blob does not exist
	DownloadUrl(ctx context.Context, in *DownloadUrlRequest, opts ...grpc.CallOption) (*DownloadUrlResponse, error)
	// Delete removes blob content from the store immediately.
	// This renders previously provided up-/download URLs invalid.
	// Ongoing up-/downloads may or may not succeed.
	// Possible errors:
	// - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
	// - NOT_FOUND if the blob does not exist
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type blobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlobServiceClient(cc grpc.ClientConnInterface) BlobServiceClient {
	return &blobServiceClient{cc}
}

func (c *blobServiceClient) UploadUrl(ctx context.Context, in *UploadUrlRequest, opts ...grpc.CallOption) (*UploadUrlResponse, error) {
	out := new(UploadUrlResponse)
	err := c.cc.Invoke(ctx, "/contentservice.BlobService/UploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobServiceClient) DownloadUrl(ctx context.Context, in *DownloadUrlRequest, opts ...grpc.CallOption) (*DownloadUrlResponse, error) {
	out := new(DownloadUrlResponse)
	err := c.cc.Invoke(ctx, "/contentservice.BlobService/DownloadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blobServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/contentservice.BlobService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlobServiceServer is the server API for BlobService service.
type BlobServiceServer interface {
	// UploadUrl provides a URL to which clients can upload the content via HTTP
	// PUT. Possible errors:
	// - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
	// - RESOURCE_EXHAUSTED if a user's upload area is exhausted
	UploadUrl(context.Context, *UploadUrlRequest) (*UploadUrlResponse, error)
	// DownloadUrl provides a URL from which clients download the content via HTTP.
	// Expect the download to be resumable, i.e. support for the `Range` header.
	// Possible errors:
	// - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
	// - NOT_FOUND if the blob does not exist
	DownloadUrl(context.Context, *DownloadUrlRequest) (*DownloadUrlResponse, error)
	// Delete removes blob content from the store immediately.
	// This renders previously provided up-/download URLs invalid.
	// Ongoing up-/downloads may or may not succeed.
	// Possible errors:
	// - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
	// - NOT_FOUND if the blob does not exist
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

// UnimplementedBlobServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBlobServiceServer struct {
}

func (*UnimplementedBlobServiceServer) UploadUrl(ctx context.Context, req *UploadUrlRequest) (*UploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadUrl not implemented")
}
func (*UnimplementedBlobServiceServer) DownloadUrl(ctx context.Context, req *DownloadUrlRequest) (*DownloadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadUrl not implemented")
}
func (*UnimplementedBlobServiceServer) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterBlobServiceServer(s *grpc.Server, srv BlobServiceServer) {
	s.RegisterService(&_BlobService_serviceDesc, srv)
}

func _BlobService_UploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServiceServer).UploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentservice.BlobService/UploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServiceServer).UploadUrl(ctx, req.(*UploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobService_DownloadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServiceServer).DownloadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentservice.BlobService/DownloadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServiceServer).DownloadUrl(ctx, req.(*DownloadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlobService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlobServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/contentservice.BlobService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlobServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BlobService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "contentservice.BlobService",
	HandlerType: (*BlobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadUrl",
			Handler:    _BlobService_UploadUrl_Handler,
		},
		{
			MethodName: "DownloadUrl",
			Handler:    _BlobService_DownloadUrl_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _BlobService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "blobs.proto",
}
