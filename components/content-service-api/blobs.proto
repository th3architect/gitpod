// Copyright (c) 2020 TypeFox GmbH. All rights reserved.
// Licensed under the GNU Affero General Public License (AGPL).
// See License-AGPL.txt in the project root for license information.

syntax = "proto3";

package contentservice;

option go_package = "github.com/gitpod-io/gitpod/content-service/api";

service BlobService {
  // UploadUrl provides a URL to which clients can upload the content via HTTP
  // PUT. Possible errors:
  // - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
  // - RESOURCE_EXHAUSTED if a user's upload area is exhausted
  rpc UploadUrl(UploadUrlRequest) returns (UploadUrlResponse) {}

  // DownloadUrl provides a URL from which clients download the content via HTTP.
  // Expect the download to be resumable, i.e. support for the `Range` header.
  // Possible errors:
  // - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
  // - NOT_FOUND if the blob does not exist
  rpc DownloadUrl(DownloadUrlRequest) returns (DownloadUrlResponse) {}

  // Delete removes blob content from the store immediately.
  // This renders previously provided up-/download URLs invalid.
  // Ongoing up-/downloads may or may not succeed.
  // Possible errors:
  // - INVALID_ARGUMENT if owner_id or name do not match `[a-zA-Z0-9._\-\/]+`
  // - NOT_FOUND if the blob does not exist
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
}

message BlobRef {
  string owner_id = 1;
  string name = 2;
}

message UploadUrlRequest {
  BlobRef ref = 1;
  // time_to_live is a valid Go duration string that determines an object's
  string time_to_live = 2;
  string media_type = 3;
}

message UploadUrlResponse {
  string url = 1;
  string commit_token = 2;
}

message CommitRequest {
  BlobRef ref = 1;
  string commit_token = 2;
}

message CommitResponse {}

message DownloadUrlRequest {
  BlobRef ref = 1;
}

message DownloadUrlResponse {
  string url = 1;
}

message DeleteRequest {
  BlobRef ref = 1;
}

message DeleteResponse {}
